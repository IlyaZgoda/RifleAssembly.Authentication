# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  COMPOSE_FILE: src/docker-compose.yml

jobs:
  build:
    runs-on: [self-hosted, windows, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Stop old containers
        shell: cmd
        run: docker-compose -f ${{ env.COMPOSE_FILE }} down --rmi local -v --remove-orphans || true

      - name: Prepare secrets
        shell: cmd
        run: |
          mkdir -p secrets
          echo "${{ secrets.JWT_PRIVATE_KEY }}" > secrets/private_key.xml

      - name: Build and start
        shell: cmd
        run: |
          docker-compose -f ${{ env.COMPOSE_FILE }} build
          docker-compose -f ${{ env.COMPOSE_FILE }} up -d

      - name: Show logs
        shell: cmd
        run: |
          docker-compose -f ${{ env.COMPOSE_FILE }} logs

      - name: Health Check
      - name: Health Check
        shell: cmd
        run: |
            echo Testing API endpoint...
            timeout /t 10 /nobreak >nul

            REM Выполняем запрос и сохраняем HTTP-статус в переменную
            for /f "delims=" %%R in ('curl -s -o nul -w "%%{http_code}" http://localhost:8080/api/health') do set RESPONSE=%%R

            REM Проверяем статус
            if "%RESPONSE%"=="200" (
            echo API test passed. HTTP Status Code: %RESPONSE%
            ) else (
            echo API test failed. HTTP Status Code: %RESPONSE%
            exit 1
            )

      - name: Cleanup
        shell: cmd
        if: always()
        run: |
          docker-compose -f %COMPOSE_FILE% down
          rmdir /s /q secrets
    
