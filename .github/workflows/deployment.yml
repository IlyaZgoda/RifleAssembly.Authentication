# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  COMPOSE_FILE: src/docker-compose.yml
  API_URL: http://localhost:8080
  JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}

jobs:
  build:
    runs-on: [self-hosted, windows, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-config-inline: |
            [registry."docker.io"]
            mirrors = ["mirror.gcr.io"]
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ~/.docker/cache
            src/bin/
            src/obj/
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/docker-compose.yml') }}

      - name: Build and push with Buildx
        uses: docker/build-push-action@v6          
        with:
          context: ${{ github.workspace }}/src
          file: ${{ github.workspace }}/src/Web/RifleAssembly.Authentication.Web/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: rifleassembly-authentication:latest

      - name: Stop old containers
        shell: cmd
        run: docker-compose -f ${{ env.COMPOSE_FILE }} down --rmi local -v --remove-orphans || true

      - name: Build and start
        shell: cmd
        run: |
          docker-compose -f ${{ env.COMPOSE_FILE }} up -d

      - name: Make health check request
        id: request
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.API_URL }}/api/health
          method: 'GET'
          timeout: 120
          retry: 5

      - name: Check response
        shell: cmd
        run: |
          if ${{ steps.request.outputs.status }} == 200 (
           echo API test passed.
          ) else (
           echo API test failed.
           exit /b 1
          )
          echo HTTP Status Code: ${{ steps.request.outputs.status }}

      - name: Check secret via JS
        uses: actions/github-script@v6
        with:
            script: |
              const secret = process.env.JWT_PRIVATE_KEY;
              if (!secret) {
                  core.setFailed('JWT_PRIVATE_KEY is empty!');
              }
              console.log(`Secret length: ${secret?.length || 0}`);

      - name: Cleanup on failure
        if: failure()
        shell: cmd
        run: |
          docker-compose -f ${{ env.COMPOSE_FILE }} logs
          docker-compose -f ${{ env.COMPOSE_FILE }} down -v
          
    
